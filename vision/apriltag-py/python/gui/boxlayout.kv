
WindowManager:
	FirstWindow:
	InputWindow:
	DirectionsWindow:


<FirstWindow>
	name: "first"

	BoxLayout:
		size: root.width, root.height
		padding: 50
		spacing: 10
		orientation: "vertical"

		ScaleLabel: 
			font_size: 90
			font_name: "RobotoMono-Regular"
			color: (1, 1, 1, 1)
			text: "Calibration"
			background_color: (23/255, 37/255, 41/255, 1)
			pos_hint: {'center_x': 0.5}
			size_hint: (1, 0.2)
			canvas.before:
				Color:
					rgba: self.background_color
				Rectangle:
					size: self.size
					pos: self.pos
			color: (1, 1, 1, 1)

		ScaleLabel: 
			font_size: 40
			font_name: "RobotoMono-Regular"
			color: (1, 1, 1, 1)
			text_size: root.width, root.height
			valign: "center"
			halign: "center"
			text: "Please have a printed checkerboard and apriltag calibration board ready for calibration."
			background_color: (23/255, 37/255, 41/255, 1)
			pos_hint: {'center_x': 0.5}
			size_hint: (1, 1)
			canvas.before:
				Color:
					rgba: self.background_color
				Rectangle:
					size: self.size
					pos: self.pos
			color: (1, 1, 1, 1)					

		ScaleButton:
			font_size: 80
			font_name: "RobotoMono-Regular"
			background_color: (240/255, 116/255, 112/255,1)
			color: (1, 1, 1, 1)
			text: "Start"
			pos_hint: {'center_x': 0.5}
			size_hint: (0.5, 0.2)
			on_release: 
				app.root.current = "input"
			


<InputWindow>
	name: "input"

	FloatLayout:

		GridLayout:
			rows: 2
			cols: 2
			padding: 10
			spacing: 40
			pos_hint: {'center_x': 0.5, 'center_y': 0.8}
			size_hint_y: 0.2
			size_hint_x: 0.5
			Label:
				id: rows
				markup: True
				font_size: rows.height/2
				font_name: "RobotoMono-Regular"
				color: (1, 1, 1, 1)
				text: "[b]Number of Rows[/b]: "
			TextInput:
				id: rowsInput
				multiline: False
				input_filter: 'int'
				font_size: rows.height/2
				font_name: "RobotoMono-Regular"
				color: (1, 1, 1, 1)
			Label:
				id: columns
				markup: True
				font_size: rows.height/2
				font_name: "RobotoMono-Regular"
				color: (1, 1, 1, 1)
				text: "[b]Number of Columns[/b]: "
			TextInput:
				id: columnsInput
				multiline: False
				font_size: rows.height/2
				font_name: "RobotoMono-Regular"
				color: (1, 1, 1, 1)
			

		ScaleButton:
			id: calibrationButton
			font_size: 80
			font_name: "RobotoMono-Regular"
			color: (1, 1, 1, 1)
			background_color: (240/255, 116/255, 112/255,1)
			pos_hint: {'center_x': 0.8, 'center_y': 0.2}
			size_hint: (0.4, 0.1)
			text: "Begin"
			on_press:
				app.root.current: "progress"
				root.handle_input(rowsInput.text,columnsInput.text, fileCalibrationChooser.selection, filePositionChooser.selection)
		ScaleButton:
			id: backButton
			font_size: 80
			font_name: "RobotoMono-Regular"
			color: (1, 1, 1, 1)
			background_color: (240/255, 116/255, 112/255,1)
			pos_hint: {'center_x' : 0.2, 'center_y': 0.2}
			size_hint: (0.4, 0.1)
			text: "Back"
			on_release:
				app.root.current = "first"

				


		ScaleButton:
			id: calibrationChooser
			background_color: (0,1/255,1/255,1)
			font_size: 20
			font_name: "RobotoMono-Regular"
			pos_hint: {'center_x': 0.5, 'center_y': 0.55}
			size_hint: (0.2, 0.1)
			text: "Select Calibration File"
			on_press: root.showCalibrationChooser = not root.showCalibrationChooser

		ScaleButton:
			id: positionChooser
			background_color: (0,1/255,1/255,1)
			font_size: 20
			font_name: "RobotoMono-Regular"
			pos_hint: {'center_x': 0.5, 'center_y': 0.4}
			size_hint: (0.2, 0.1)
			text: "Select Position File"
			on_press: root.showPositionChooser = not root.showPositionChooser
		
		ScaleButton:
			id: toDirections
			color: (117/255, 117/255, 117/255, 1)
			font_size: 20
			font_name: "RobotoMono-Regular"
			pos_hint: {'center_x': 0.5, 'center_y': 0.05}
			size_hint: (0.2, 0.1)
			text: "Directions"
			on_press: app.root.current = "directions"

			
	BoxLayout:
		#layout for the FileChooser
		orientation: 'vertical'
		size_hint_y: 1 if root.showCalibrationChooser else 0
		size_hint_x: 1 if root.showCalibrationChooser else 0
		pos_hint: {'center_x': 0.5, 'center_y': 0.5} if root.showCalibrationChooser else {'center_x': -1, 'center_y': -1}
		FileChooserListView:
			id: fileCalibrationChooser
			canvas.before:
				Color:
					rgba: 23/255, 37/255, 41/255, 1
				Rectangle:
					pos: self.pos
					size: self.size
				#on_selection: root.file_fire_select(*args)
			RoundedButton:
				id: test
				canvas.before:
					Color:
						rgba: 140/255, 60/255, 60/255, 1
					RoundedRectangle:
						size: self.size
						pos: self.pos
						radius: [10]
				font_size: 40
				pos_hint: {'center_x': 0.5, 'center_y': 0.955}
				size_hint: (0.1, 0.05)
				text: "Exit"
				on_press: root.showCalibrationChooser = not root.showCalibrationChooser
				
	BoxLayout:
		#layout for the PositionsChooser
		orientation: 'vertical'
		size_hint_y: 1 if root.showPositionChooser else 0
		size_hint_x: 1 if root.showPositionChooser else 0
		pos_hint: {'center_x': 0.5, 'center_y': 0.5} if root.showPositionChooser else {'center_x': -1, 'center_y': -1}
		FileChooserListView:
			id: filePositionChooser
			canvas.before:
				Color:
					rgba: 23/255, 37/255, 41/255, 1
				Rectangle:
					pos: self.pos
					size: self.size
				#on_selection: root.file_fire_select(*args)
			RoundedButton:
				id: test
				canvas.before:
					Color:
						rgba: 140/255, 60/255, 60/255, 1
					RoundedRectangle:
						size: self.size
						pos: self.pos
						radius: [10]
				font_size: 40
				pos_hint: {'center_x': 0.5, 'center_y': 0.955}
				size_hint: (0.1, 0.05)
				text: "Exit"
				on_press: root.showPositionChooser = not root.showPositionChooser



<DirectionsWindow>
	name: "directions"

	FloatLayout:
		#layout for directions to use the gui
		orientation: 'vertical'
		size_hint_y: 1
		size_hint_x: 1
		pos_hint: {'center_x': 0.5, 'center_y': 0.5}
		ScaleLabel:
			font_size: 80
			font_name: "RobotoMono-Regular"
			text: "How To Calibrate"
			pos_hint: {'center_x': 0.5, 'center_y': 0.95}
		ScaleLabel:
			text: "1.) After inputting number of columns, rows, and files (optional), press 'Begin'\n\n2.) Place checkerboard in front of camera.\n    When aligned, press the Spacebar 3 times\n\n3.) When camera identifies the AprilTags (shows red dots on them), press the Spacebar\n\n4.) The vision system is now calibrated and the camera picks up the AprilTags (can see the green outline)\n    press the Spacebar to close the camera window"
			pos_hint: {'center_x': 0.5, 'center_y': 0.6}
			size_hint: (0.9, 0.9)
			font_size: 70
			font_name: "RobotoMono-Regular"
		ScaleButton:
			font_size: 30
			background_color: (240/255, 81/255, 87/255, 1)
			font_name: "RobotoMono-Regular"
			size_hint: (0.2, 0.1)
			text: "Got it!" 
			pos_hint: {'center_x': 0.5, 'center_y': 0.2}
			on_press: app.root.current = "input"

			


<RoundedButton@Button>
	background_color: (0,0,0,0)
	background_normal: ''
	canvas.before:
		Color:
			rgba: (0,139/255,139/255,1)
		RoundedRectangle:
			size: self.size
			pos: self.pos
			radius: [40]

#helps scale the text of a Label widget
<ScaleLabel@Label>:
    _scale: 1. if self.texture_size[0] < self.width else float(self.width) / self.texture_size[0]
    canvas.before:
        PushMatrix
        Scale:
            origin: self.center
            x: self._scale or 1.
            y: self._scale or 1.
    canvas.after:
        PopMatrix

<ScaleTextInput@TextInput>
	_scale: 1. if self.texture_size[0] < self.width else float(self.width) / self.texture_size[0]
	canvas.before:
        PushMatrix
        Scale:
            origin: self.center
            x: self._scale or 1.
            y: self._scale or 1.
    canvas.after:
        PopMatrix

<-ScaleButton@Button>:
	state_image: self.background_normal if self.state == 'normal' else self.background_down
	_scale: 1. if self.texture_size[0] < self.width else float(self.width) / self.texture_size[0]
	canvas:
		Color:
			rgba: self.background_color
		BorderImage:
			border: self.border
			pos: self.pos
			size: self.size
		PushMatrix
		Scale:
			origin: self.center
			x: self._scale or 1.
			y: self._scale or 1.
		Color:
			rgba: self.disabled_color if self.disabled else self.color
		Rectangle:
			texture: self.texture
			size: self.texture_size
			pos: int(self.center_x - self.texture_size[0] / 2.), int(self.center_y - self.texture_size[1] / 2.)
		PopMatrix

